import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,d as e}from"./app-55302f36.js";const t={},c=e(`<h2 id="同源策略和跨域" tabindex="-1"><a class="header-anchor" href="#同源策略和跨域" aria-hidden="true">#</a> 同源策略和跨域</h2><h3 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略" aria-hidden="true">#</a> 同源策略</h3><ul><li>同源：如果两个页面的协议、域名和端口都相同则两个页面具有相同的源</li><li><img src="https://eason-blog.oss-cn-chengdu.aliyuncs.com/blogPicture/202311032309607.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></li><li>同源策略：是浏览器提供的一个安全功能 ，同源策略限制了从同一个源加载的文档或脚本如何与来着另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制</li></ul><h3 id="跨域" tabindex="-1"><a class="header-anchor" href="#跨域" aria-hidden="true">#</a> 跨域</h3><ul><li>概念：同源指的是两个URL的协议、域名、端口一致。反之，则是跨域。</li><li>出现跨域的根本原因：浏览器的同源策略 不允许非同源的URL之间进行资源交互</li></ul><h4 id="浏览器对跨域请求的拦截" tabindex="-1"><a class="header-anchor" href="#浏览器对跨域请求的拦截" aria-hidden="true">#</a> 浏览器对跨域请求的拦截</h4><figure><img src="https://eason-blog.oss-cn-chengdu.aliyuncs.com/blogPicture/202311032309128.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="如何实现跨域数据请求" tabindex="-1"><a class="header-anchor" href="#如何实现跨域数据请求" aria-hidden="true">#</a> 如何实现跨域数据请求</h4><ul><li>实现跨域数据请求，有两种解决方案，分别是<code>JSONP</code>和<code>CORS</code></li><li>JSONP:出现早，兼容性好（兼容低版本IE），缺点是只支持GET请求，不支持POST请求</li><li>CORS：出现较晚，是W3C标准，属于跨域Ajax请求的根本解决方案，支持GET和POST请求。</li></ul><h2 id="jsonp" tabindex="-1"><a class="header-anchor" href="#jsonp" aria-hidden="true">#</a> JSONP</h2><ul><li><code>JSONP</code>是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问问题</li></ul><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h3><ul><li>由于浏览器同源策略的限制，网页中无法通过Ajax请求非同源的接口数据，但是script标签不受浏览器同源策略的影响，可以通过 src 属性，请求非同源的 js 脚本，因此，<code>JSONP</code>的实现原理，就是通过<code>&lt;script&gt;</code>标签的src属性，请求跨域的数据接口，并通过函数调用的形式，接受跨域接口响应回来的数据。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;拿到了Data数据：&#39;</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;./js/getdata.js?callback=abc&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意：<code>JSONP</code>和<code>Ajax</code>之间没有任何关系，不能把<code>JSONP</code>请求数据的方式叫做<code>Ajax</code>，因为<code>JSONP</code>没有用到<code>XMLHttpRequest</code>这个对象</li></ul>`,15),o=[c];function i(l,r){return n(),s("div",null,o)}const u=a(t,[["render",i],["__file","跨域和JSONP.html.vue"]]);export{u as default};
