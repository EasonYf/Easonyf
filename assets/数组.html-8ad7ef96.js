import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as e,c as o,a as n,b as s,e as c,d as l}from"./app-55302f36.js";const r={},i=l(`<h2 id="数组概述" tabindex="-1"><a class="header-anchor" href="#数组概述" aria-hidden="true">#</a> 数组概述</h2><ul><li>数组是一个集合，用于存放相同类型的数组元素</li><li>特点： <ul><li>数组中每个数据元素具有相同数据类型</li><li>数组占用一段连续的内存空间</li></ul></li></ul><h2 id="一维数组" tabindex="-1"><a class="header-anchor" href="#一维数组" aria-hidden="true">#</a> 一维数组</h2><figure><img src="https://eason-blog.oss-cn-chengdu.aliyuncs.com/blogPicture/202311061253901.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//定义方式1：数据类型 数组名[元素个数];</span>
	<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">//使用数组下标对数组元素进行赋值或访问</span>
	arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
	arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>

	<span class="token comment">//定义方式2：数据类型 数组名[元素个数] =  {值1，值2 ，值3 ...};</span>
	<span class="token comment">//若大括号{ }内的元素个数小于定义的数组长度，则剩余数据默认使用0填充</span>
	<span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">//定义方式3：</span>
	<span class="token comment">//数据类型 数组名[] =  {值1，值2 ，值3 ...};</span>
	<span class="token keyword">int</span> arr3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取数组再内存中的首地址" tabindex="-1"><a class="header-anchor" href="#获取数组再内存中的首地址" aria-hidden="true">#</a> 获取数组再内存中的首地址</h3><p>:::tips 获取数组首地址：<code>arr</code>或<code>&amp;arr[0]</code> ::: 注意：<code>arr</code>或<code>&amp;arr[0]</code>：数组首元素的地址，<code>&amp;arr</code>：整个数组的地址【地址值相同，含义不同】</p><h3 id="一维数组的地址" tabindex="-1"><a class="header-anchor" href="#一维数组的地址" aria-hidden="true">#</a> 一维数组的地址</h3><h4 id="arr等价-arr-0" tabindex="-1"><a class="header-anchor" href="#arr等价-arr-0" aria-hidden="true">#</a> <code>arr</code>等价<code>&amp;arr[0]</code></h4><ul><li>表示数组首元素地址，指向数组第一个元素，<code>arr + 1</code>或<code>$arr[0] + 1</code>会跳过第一个元素【加上一个数组元素的字节数】，指向数组的下一个元素。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//定义两个字符数组</span>
    cin <span class="token operator">&gt;&gt;</span> str1<span class="token punctuation">;</span><span class="token comment">//读取第一段字符</span>
    
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;This is the first character!\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;--------------------------\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">//getchar();</span>
    <span class="token comment">//读取第二段字符</span>
    cin <span class="token operator">&gt;&gt;</span> str2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;This is the second character!\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">&lt;&lt;</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://eason-blog.oss-cn-chengdu.aliyuncs.com/blogPicture/202311061253785.png" alt="image.png" loading="lazy"> :::tips 通过以上代码可以看出输入一个字符串时用<code>arr</code>，起始位置为0，使用<code>arr + 1</code>读取时，起始位置为1 :::</p><h4 id="arr" tabindex="-1"><a class="header-anchor" href="#arr" aria-hidden="true">#</a> <code>&amp;arr</code></h4><figure><img src="https://eason-blog.oss-cn-chengdu.aliyuncs.com/blogPicture/202311061253900.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//一维数组</span>
	<span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">/* 一维数组的地址与指针 */</span>
	<span class="token keyword">int</span><span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//&amp;arr：整个数组的地址	//&amp;arr + 1：指向数组的末尾处</span>
	<span class="token keyword">int</span><span class="token operator">*</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">//arr等价于&amp;arr[0]，类型为int *类型：数组首元素地址 </span>
	cout <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		<span class="token comment">//4</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		<span class="token comment">//2</span>


	cout <span class="token operator">&lt;&lt;</span> arr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>			<span class="token comment">//输出数组的地址009DFBB8</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>arr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>			<span class="token comment">//1【第1个元素值】</span>
	cout <span class="token operator">&lt;&lt;</span> arr <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		<span class="token comment">//009DFBBC	后移4字节【跳过1个元素】</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		<span class="token comment">//2【第2个元素值】</span>
		
	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		<span class="token comment">//输出第一个数组元素的地址009DFBB8</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		<span class="token comment">//1【第1个元素值】</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>	<span class="token comment">//009DFBBC	后移4字节【跳过1个元素】</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>	<span class="token comment">//2【第2个元素值】</span>

	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>arr <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>			<span class="token comment">//009DFBB8</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		<span class="token comment">//009DFBB8</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>arr <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>		<span class="token comment">//009DFBCC	后移4*5=20字节【跳过整个数组】</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>arr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>	<span class="token comment">//009DFBCC</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二维数组" tabindex="-1"><a class="header-anchor" href="#二维数组" aria-hidden="true">#</a> 二维数组</h2>`,16),u=n("img",{src:"https://eason-blog.oss-cn-chengdu.aliyuncs.com/blogPicture/202311061253186.png",alt:"image.png",loading:"lazy"},null,-1),k=n("img",{src:"https://eason-blog.oss-cn-chengdu.aliyuncs.com/blogPicture/202311061253120.png",alt:"image.png",loading:"lazy"},null,-1),d={href:"https://blog.csdn.net/newson92/article/details/109879873?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169754569316800213093213%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169754569316800213093213&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-109879873-null-null.142%5Ev96%5Epc_search_result_base1&utm_term=c%2B%2B%E6%95%B0%E7%BB%84&spm=1018.2226.3001.4187",target:"_blank",rel:"noopener noreferrer"},m=n("sub",null,"all",-1),b=n("sup",null,"v96",-1);function v(g,h){const a=p("ExternalLinkIcon");return e(),o("div",null,[i,n("p",null,[u,k,s(" 详情见："),n("a",d,[s("https://blog.csdn.net/newson92/article/details/109879873?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169754569316800213093213%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169754569316800213093213&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2"),m,s("top_positive~default-1-109879873-null-null.142"),b,s("pc_search_result_base1&utm_term=c%2B%2B%E6%95%B0%E7%BB%84&spm=1018.2226.3001.4187"),c(a)])])])}const f=t(r,[["render",v],["__file","数组.html.vue"]]);export{f as default};
